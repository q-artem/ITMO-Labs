- мой простенький форматировщик ассемблера, на питоне, есть собранный в .exe (https://github.com/q-artem/asmFormatter)
- большой подробный гайд по бэвм (https://github.com/Zerumi/OPD-guide-RU-/tree/master)
- трассировка в консоли (https://github.com/tune-it/bcomp/blob/v2-ng-master/doc/cli.html)
- список вопросов (https://se.ifmo.ru/~ninomt/questions.html) на экз
- про ассемблер (Lab5/for_easy_defence/про ассемблер.txt)
- конвертер код -> asm (https://github.com/ChupIks777/public-projects/tree/main)
- микролекция 2 функции (файл в этой директории)
- вырианты рубежки 2 (https://github.com/serezk4/ITMO.labs/blob/master/OPD/rub.md)
- рубеж 2 (https://205826.github.io/MicroProgramTracingBasicComputer/
           https://github.com/Zerumi/OPD-guide-RU-/blob/master/microcode_guide.md
           https://docs.google.com/spreadsheets/d/1o48u14qvOxD4vGj8GKwhTaU_V9k2HqpNV8Ys4oXJqbM/edit?gid=515233452#gid=515233452)
- разгон бэвм (F11/F12)
- информация по рубежу
У меня для вас на завтра ценная информация по рубежу. Сегодня устно рассказывала, но только одной группе.
1. Если написано, что "нумерация начинается с N", это означает, что первый элемент имеет номер N (а не что нужно пропустить первые N элементов)
2. Если написано, что разрядность чего-то N бит, зто значит, что значения всех остальных (не используемых под число) битов в ячейке не определено, то есть там может быть вообще любой мусор, и программа должна его игнорировать
3. Если написано, что число занимает N разрядов (например, 32), это значит, что все N разрядов должны содержать корректные значения, даже если значимая часть числа уместилась в меньшее количество бит
4. Если написано, что исходные данные или результат хранится с адреса N, это значит, что при размещении их по другому адресу ваша программа не пройдет автоматическую проверку
5. Если исходные данные или результат занимают больше 16 разрядов, для их хранения используется little endian. Если имеем 32-битное число FFEE 0011 записанное с адреса 0х05, то: 005: 0011, 006: FFEE; внутри числа байты не переставляем.
6. Кнопка "Завершить рубеж и сдать работу" работает сразу, без подтверждения, и это действие нельзя отменить. Её можно вообще не нажимать.
7. Содержимое редактора сохраняется при каждой компиляции.
8. Кнопки Пуск и Продолжение НЕ компилируют программу (как в БЭВМ)
9. Кнопки Пуск и Продолжение выполняют только 1000 инструкций за раз, после чего выполнение программы прерывается.
10. Память и отображаемые регистры редактируемы. Вы можете занести программу в память вообще без кода, но она не сохранится, т.к. ответом считается содержимое редактора.
11. Вам не будет дан исходный массив, но вы можете использовать любые исходные данные для тестирования и сохранять их вместе с программой, это не повлияет на её оценку.
12. Память показывает положение IP (синяя ячейка) и положение AR (желтая ячейка). Редактор тоже показывает положение IP, выделяя строку синим. Сейчас есть известный баг, что это выделение отстает на одну строку. А может и не на одну, если писать метки на отдельной строке от команд.
- моя прога с рубежа, не успел проверить, работает ли, но идеалогия написания правильная (не пихаем аргументы в стек, а просто угазываем глобально перед функцией) (в этой директории)
